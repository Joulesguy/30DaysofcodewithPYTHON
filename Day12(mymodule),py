# ðŸ“˜ Day 12: - 30DaysOfPython Challenge by Swift Cyberwatch
## Modules
### What is a Module
"""
A module is a file containing a set of codes or a set of functions which can be included 
to an application. 
A module could be a file containing a single variable, a function or a big code base.
"""
### Creating a Module
"""
To create a module we write our codes in a python script and we save it as a .py file. 
Create a file named mymodule.py inside your project folder. Let us write some code in this 
file.
"""
# mymodule.py file
def generate_full_name(firstname, lastname):
    return firstname + ' ' + lastname
# Create main.py file in your project directory and import the mymodule.py file.
### Importing a Module
# To import the file we use the _import_ keyword and the name of the file only.
# main.py file
import mymodule
print(mymodule.generate_full_name('Swift', 'Cyberwatch')) # Swift Cyberwatch
### Import Functions from a Module
# We can have many functions in a file and we can import all the functions differently.
# main.py file
from mymodule import generate_full_name, sum_two_nums, person, gravity
print(generate_full_name('Swift','Cyberwatch'))
print(sum_two_nums(1,9))
mass = 100;
weight = mass * gravity
print(weight)
print(person['firstname'])
### Import Functions from a Module and Renaming
# During importing we can rename the name of the module.
# main.py file
from mymodule import generate_full_name as fullname, sum_two_nums as total, person as p, gravity as g
print(fullname('Swift','Cyberwatch'))
print(total(1, 9))
mass = 100;
weight = mass * g
print(weight)
print(p)
print(p['firstname'])
### Statistics Module
"""
The statistics module provides functions for mathematical statistics of numeric data. The 
popular 
statistical functions which are defined in this module: _mean_, _median_, _mode_, _stdev_ 
etc.
"""
from statistics import * # importing all the statistics modules
ages = [20, 20, 4, 24, 25, 22, 26, 20, 23, 22, 26]
print(mean(ages)) # ~22.9
print(median(ages)) # 23
print(mode(ages)) # 20
print(stdev(ages)) # ~2.3
### Math Module
# Module containing many mathematical operations and constants.
import math
print(math.pi) # 3.141592653589793, pi constant
print(math.sqrt(2)) # 1.4142135623730951, square root
print(math.pow(2, 3)) # 8.0, exponential function
print(math.floor(9.81)) # 9, rounding to the lowest
print(math.ceil(9.81)) # 10, rounding to the highest
print(math.log10(100)) # 2, logarithm with 10 as base
"""
Now, we have imported the *math* module which contains lots of function which can help us 
to perform mathematical calculations. To check what functions the module has got, we can 
use _help(math)_, or _dir(math)_. This will display the available functions in the module. 
If we want to import only a specific function from the module we import it as follows:
"""
from math import pi
print(pi)
# It is also possible to import multiple functions at once
from math import pi, sqrt, pow, floor, ceil, log10
print(pi) # 3.141592653589793
print(sqrt(2)) # 1.4142135623730951
print(pow(2, 3)) # 8.0
print(floor(9.81)) # 9
print(ceil(9.81)) # 10
print(math.log10(100)) # 2
# But if we want to import all the function in math module we can use \* .
from math import *
print(pi) # 3.141592653589793, pi constant
print(sqrt(2)) # 1.4142135623730951, square root
print(pow(2, 3)) # 8.0, exponential
print(floor(9.81)) # 9, rounding to the lowest
print(ceil(9.81)) # 10, rounding to the highest
print(math.log10(100)) # 2
# When we import we can also rename the name of the function.
from math import pi as PI # PI now holds the pi value. you can use anything but related 
print(PI) # 3.141592653589793
### String Module
# A string module is a useful module for many purposes. The example below shows some use of the string module.
import string
print(string.ascii_letters) # abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
print(string.digits) # 0123456789
print(string.punctuation) # !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~
### Random Module
"""
By now you are familiar with importing modules. Let us do one more import to get very 
familiar with it. 
Let us import _random_ module which gives us a random number between 0 and 0.9999.... The 
_random_ module has lots of functions but in this section we will only use _random_ and 
_randint_.
"""
from random import random, randint
print(random()) # it doesn't take any arguments; it returns a value between 0 and 0.9999
print(randint(5, 20)) # it returns a random integer number between [5, 20] inclusive